{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","inputItem","paddingRight","App","classes","useState","calories","setCalories","enteredCalories","setEnteredCalories","statusText","textColor","Grid","container","direction","alignItems","justifyContent","item","className","TextField","onChange","e","isNaN","parseInt","target","value","label","Button","variant","onClick","console","log","Typography","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CAAEC,aAAc,QAqEdC,MAlEf,WACE,IAAMC,EAAUN,IAChB,EAAgCO,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8CF,qBAA9C,mBAAOG,EAAP,KAAwBC,EAAxB,KAEIC,EAAa,GACbC,EAAY,QAchB,OAZIL,GAAY,KACdI,EAAa,gCACJJ,GAAY,KACrBI,EAAa,8BACbC,EAAY,WACHL,GAAY,MACrBI,EAAa,4CACbC,EAAY,OACHL,EAAW,OACpBI,EAAa,gDACbC,EAAY,WAGZ,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,WAAW,SACXC,eAAe,SAJjB,UAME,eAACJ,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVE,eAAe,SACfD,WAAW,SAJb,UAME,cAACH,EAAA,EAAD,CAAMK,MAAI,EAACC,UAAWd,EAAQH,UAA9B,SACE,cAACkB,EAAA,EAAD,CACED,UAAWd,EAAQH,UACnBmB,SAAU,SAACC,GACLC,MAAMC,SAASF,EAAEG,OAAOC,SAC5BhB,EAAmBc,SAASF,EAAEG,OAAOC,SAEvCA,MAAOjB,GAAmB,GAC1BkB,MAAM,+BAGV,cAACd,EAAA,EAAD,CAAMK,MAAI,EAAV,SACE,cAACU,EAAA,EAAD,CACEC,QAAQ,YACRC,QAAS,WACPC,QAAQC,IAAI,kBACZxB,EAAYD,GAAYE,GAAmB,IAC3CC,EAAmB,OALvB,yBAYJ,cAACG,EAAA,EAAD,CAAMK,MAAI,EAAV,SACE,cAACe,EAAA,EAAD,CAAYJ,QAAQ,KAAKK,MAAO,CAAEC,MAAOvB,GAAzC,SACGD,UCrDIyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.438fac78.chunk.js","sourcesContent":["import { Button, Grid, TextField, Typography } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport React, { useState } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputItem: { paddingRight: 25 },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [calories, setCalories] = useState(0);\n  const [enteredCalories, setEnteredCalories] = useState<number | null>();\n\n  let statusText = \"\";\n  let textColor = \"green\";\n\n  if (calories <= 1500) {\n    statusText = \"You can eat plenty more food!\";\n  } else if (calories <= 2000) {\n    statusText = \"You can eat some more food!\";\n    textColor = \"#8B8000\";\n  } else if (calories <= 2500) {\n    statusText = \"You have reached peak calories for today!\";\n    textColor = \"red\";\n  } else if (calories > 2500) {\n    statusText = \"You have exceeded optimal calories for today.\";\n    textColor = \"darkred\";\n  }\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item className={classes.inputItem}>\n          <TextField\n            className={classes.inputItem}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n              if (isNaN(parseInt(e.target.value))) return;\n              setEnteredCalories(parseInt(e.target.value));\n            }}\n            value={enteredCalories || \"\"}\n            label=\"Enter Calories from meal\"\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              console.log(\"captured click\");\n              setCalories(calories + (enteredCalories || 0));\n              setEnteredCalories(null);\n            }}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h3\" style={{ color: textColor }}>\n          {statusText}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}